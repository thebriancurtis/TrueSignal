{
  "name": "Rule Processing Workflow",
  "steps": [
    {
      "prompt": "rule_optimization.json",
      "input": {
        "text": "<<input.text>>"
      },
      "output": {
        "optimized_text": "<<step.rule_optimization.json.optimized_text>>"
      }
    },
    {
      "prompt": "is_core_rule.json",
      "input": {
        "text": "<<step.rule_optimization.json.optimized_text>>"
      },
      "output": {
        "is_core": "<<step.is_core_rule.json.is_core>>"
      }
    },
    {
      "prompt": "rule_categorization.json",
      "input": {
        "text": "<<step.rule_optimization.json.optimized_text>>"
      },
      "output": {
        "category": "<<step.rule_categorization.json.category>>"
      }
    },
    {
      "prompt": "rule_deduplication.json",
      "input": {
        "rule_text": "<<step.rule_optimization.json.optimized_text>>",
        "existing_rules": "<<reference.rules_in_category>>"
      },
      "output": {
        "is_redundant": "<<step.rule_deduplication.json.is_redundant>>"
      }
    },
    {
      "prompt": "rule_consolidation.json",
      "input": {
        "original_rule": "<<step.rule_optimization.json.optimized_text>>",
        "redundant_rule": "<<matched_redundant_rule>>"
      },
      "output": {
        "consolidated_rule": "<<step.rule_consolidation.json.consolidated_rule>>"
      },
      "run_if": {
        "from": "rule_deduplication.json",
        "field": "is_redundant",
        "equals": true
      }
    }
  ]
}