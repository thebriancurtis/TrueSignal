{
  "description": "Auto-generated expert test suite for rule_deduplication.json",
  "tests": [
    {
      "name": "Valid input (from example)",
      "input": {
        "rule_text": "All passwords must be hashed.",
        "existing_rules": [
          "Passwords must be stored using cryptographic hashing.",
          "Do not store plain text passwords."
        ]
      },
      "expected_keys": [
        "is_redundant",
        "matching_rule"
      ],
      "golden_hash": "c22a428e6937df89a22eb93486b74d581f39df7d59049c0b3576545cc2b59829",
      "assert": [
        "'is_redundant' in output",
        "'matching_rule' in output"
      ],
      "type": "regression",
      "goal": "Validate historical or complex logic path is preserved."
    },
    {
      "name": "Minimal valid input",
      "input": {
        "rule_text": "x",
        "existing_rules": [
          "x"
        ]
      },
      "expected_keys": [
        "is_redundant",
        "matching_rule"
      ],
      "golden_hash": "c22a428e6937df89a22eb93486b74d581f39df7d59049c0b3576545cc2b59829",
      "assert": [
        "'is_redundant' in output",
        "'matching_rule' in output"
      ],
      "type": "regression",
      "goal": "Validate historical or complex logic path is preserved."
    },
    {
      "name": "Missing required field",
      "input": {},
      "expected_error": "Missing required field",
      "golden_hash": "44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a",
      "assert": [],
      "type": "negative",
      "goal": "Ensure error is raised when required fields are missing or input is invalid."
    },
    {
      "name": "Wrong type input",
      "input": {
        "rule_text": 123,
        "existing_rules": 123
      },
      "expected_error": "Invalid type",
      "golden_hash": "44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a",
      "assert": [],
      "type": "negative",
      "goal": "Ensure error is raised when required fields are missing or input is invalid."
    },
    {
      "name": "Redundant rule match",
      "input": {
        "rule_text": "Sanitize all user input.",
        "existing_rules": [
          "Clean all inputs.",
          "Sanitize all user input."
        ]
      },
      "assertions": {
        "is_redundant": true,
        "matching_rule": "Sanitize all user input."
      },
      "golden_hash": "a631682a18dc526a01f0c8b2c9be5f7811bd1144a6502c0ce9b666bb7ad9b7ac",
      "assert": [
        "output['is_redundant'] == true",
        "output['matching_rule'] == \"Sanitize all user input.\""
      ],
      "type": "valid",
      "goal": "Validate standard successful behavior with clean input."
    },
    {
      "name": "Non-redundant rule",
      "input": {
        "rule_text": "Encrypt traffic.",
        "existing_rules": [
          "Authenticate access."
        ]
      },
      "assertions": {
        "is_redundant": false
      },
      "golden_hash": "e2c245fa4b58b79df08cbe607f95ccd37cc982735437e657b7b8446c4274d267",
      "assert": [
        "output['is_redundant'] == false"
      ],
      "type": "valid",
      "goal": "Validate standard successful behavior with clean input."
    },
    {
      "name": "Near match (semantic threshold test)",
      "input": "$template:redundant_rule_set",
      "expected_keys": [
        "is_redundant",
        "matching_rule"
      ],
      "golden_hash": "c22a428e6937df89a22eb93486b74d581f39df7d59049c0b3576545cc2b59829",
      "assert": [
        "'is_redundant' in output",
        "'matching_rule' in output"
      ],
      "type": "regression",
      "goal": "Validate historical or complex logic path is preserved."
    }
  ]
}